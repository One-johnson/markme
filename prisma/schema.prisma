generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             String    @id @default(uuid())
  email          String    @unique
  username       String
  phone          String    @unique
  role           UserRole
  supabaseUserId String    @unique
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now())
  students       Student[]
  teachers       Teacher[]
  parents        Parent[]

  // Add indexes for frequently queried fields
  @@index([email, role]) // Optimize auth/logins
  @@index([createdAt]) // Speed up analytics/sorting
}

enum UserRole {
  ADMIN
  TEACHER
  STUDENT
  PARENT
}

model Teacher {
  id                String   @id @unique 
  name              String
  email             String   @unique
  subject           String?  
  qualifications    String?  
  certifications    String?  
  yearsOfExperience String?     
  contactPhone      String? 
  emergencyContact  String? 
  address           String? 
  status      String    @default("Fulltime")
  salaryExpectation String?   
  profilePicture    String?  
  references        String?  
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now()) @updatedAt

  // Relationships
  userId            String  
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  classes           Class[]  

  // Indexes
  @@index([userId])
  @@index([email]) 
}


model Parent {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  phone     String    @unique
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  students  Student[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())

  // Indexes
  @@index([userId]) 
  @@index([email, phone]) 
}

model Student {
  id             String       @id @default(uuid())
  name           String
  email          String       @unique
  profileImage   String?
  classId        String
  class          Class        @relation(fields: [classId], references: [id], name: "ClassToStudent", onDelete: Restrict)
  parentId       String
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent         Parent       @relation(fields: [parentId], references: [id], onDelete: Restrict)
  supabaseUserId String       @unique
  attendances    Attendance[]
  createdAt      DateTime     @default(now())

  // Indexes
  @@index([classId])
  @@index([parentId])
  @@index([userId, email])
}




model Class {
  id          String       @id 
  name        String       @unique // Ensure class names are unique
  description String? // Optional field for class details
  teacherId   String?
  teacher     Teacher?     @relation(fields: [teacherId], references: [id], onDelete: SetNull)
  attendances Attendance[]
  students    Student[]    @relation("ClassToStudent")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt // Track updates
  status      String    @default("Active")

  // Add indexes for performance
  @@index([teacherId])
  @@index([name])
}

model Attendance {
  id        String           @id @default(uuid())
  studentId String
  classId   String
  date      DateTime
  status    AttendanceStatus
  student   Student          @relation(fields: [studentId], references: [id], onDelete: Cascade) // Delete attendance if student is deleted
  class     Class            @relation(fields: [classId], references: [id], onDelete: Cascade)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  // Composite unique constraint + index
  @@unique([studentId, date])
  @@index([classId, date]) // Faster "daily class attendance" reports
  @@index([status]) // Optimize filtering by status (e.g., "all LATE entries")
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
}
